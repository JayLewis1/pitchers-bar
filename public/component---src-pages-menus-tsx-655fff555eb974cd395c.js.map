{"version":3,"sources":["webpack://gatsby-starter-default/./src/components/menus/MenuItem.tsx","webpack://gatsby-starter-default/./src/components/menus/PriceTitles.tsx","webpack://gatsby-starter-default/./src/components/menus/MenuSection.tsx","webpack://gatsby-starter-default/./src/components/menus/Menu.tsx","webpack://gatsby-starter-default/./src/pages/menus.tsx"],"names":["name","description","price","vegetarian","size","addingZeroToNum","num","undefined","priceStr","JSON","stringify","includes","n","split","sp","nPrice","length","className","small","medium","large","useState","priceTitles","setTitles","useEffect","settingPriceTitles","console","log","pName","id","Fragment","items","map","item","key","sections","sectionName","setSectionName","value","onChange","e","target","s","index","breakfastMenu","require","mainMenu","drinksMenu","connect","state","menuType","menu","setMenuTypes","mtype","type","payload","menuSelection","setMenuSelection","title","onClick","m"],"mappings":"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","file":"component---src-pages-menus-tsx-655fff555eb974cd395c.js","sourcesContent":["import React, { Fragment } from 'react'\n\ninterface ComponentProps {\n name : string\n description: string\n price: number\n vegetarian: boolean\n size: {\n   small: number\n   medium: number\n   large: number\n }\n}\n\n const MenuItem = ({name, description, price, vegetarian, size} :ComponentProps ) => {\n\n  const addingZeroToNum = (num: number) => {\n    if(num === undefined) {\n      return null;\n    }\n    let priceStr = JSON.stringify(num)\n    if(priceStr.includes(\".\")) {\n      let n = priceStr.split(\".\");        \n      let sp = n[1].split(\"\");\n      let nPrice = sp[0] + sp[1];\n      if(sp.length === 1) {\n        nPrice = sp[0] + \"0\";\n      } \n      return n[0] + \".\" + nPrice;\n    } else  {\n      return priceStr + \".\" + \"00\";\n    }\n  }\n\n  return (\n    <div className=\"menu-item\">\n            <span className=\"name-wrapper\">\n            { description !== \"\" ?\n            <h4 className=\"item-name\">{name}</h4> :\n            <h4 className=\"item-name\">{name}</h4>\n            }\n            { vegetarian  &&\n            <p className=\"veggie\">v</p>\n            }\n            {  size === undefined ?\n               <p className=\"price\">£{addingZeroToNum(price)}</p> \n               :\n               <span className=\"price-by-size\">\n                 <p className=\"price\">£{addingZeroToNum(size.small)}</p>\n                 <p className=\"price\">£{addingZeroToNum(size.medium)}</p>\n                 {  size.large !== undefined &&\n                    <p className=\"price\">£{addingZeroToNum(size.large)}</p>\n                 }\n                \n               </span>\n            } \n          </span>\n          <p className=\"description\">{description}</p> \n    </div>\n  )\n}\n\nexport default MenuItem;","import React, { useState,useEffect, Fragment } from 'react'\n\ninterface ComponentProps {\n  name : string\n}\n\nconst PriceTitles = ({name} : ComponentProps) => {\n  const [priceTitles, setTitles]  = useState({\n    small: \"\",\n    medium: \"\",\n    large : \"\"\n  })\n\n  useEffect(() => {\n    settingPriceTitles(name)\n    console.log(name)\n  },[name])\n\nconst settingPriceTitles = (pName:string) => {\n  switch(pName) {\n    case \"Draught\" :\n      setTitles({\n        small: \"half\",\n        medium: \"pint\",\n        large : \"jug\"\n      })    \n      console.log(priceTitles);\n      break;\n    case \"Bottles\" :\n        setTitles({\n          small: \"single\",\n          medium: \"bucket\",\n          large : \"\"\n        })    \n        break;\n    case \"Wine\" :\n        setTitles({\n          small: \"175ml\",\n          medium: \"250ml\",\n          large : \"bottle\"\n        })    \n        break;\n    case \"Vodka\" :\n        setTitles({\n          small: \"single\",\n          medium: \"double\",\n          large : \"\"\n        })    \n        break;\n    case \"Brandy\" :\n          setTitles({\n            small: \"single\",\n            medium: \"double\",\n            large : \"\"\n          })    \n          break;\n    case \"Gin\" :\n            setTitles({\n              small: \"single\",\n              medium: \"double\",\n              large : \"\"\n            })    \n            break;\n    case \"Whiskey\" :\n              setTitles({\n                small: \"single\",\n                medium: \"double\",\n                large : \"\"\n              })    \n              break;\n    case \"Rum\" :\n                setTitles({\n                  small: \"single\",\n                  medium: \"double\",\n                  large : \"\"\n                })    \n                break;\n    case \"Other\" :\n                  setTitles({\n                    small: \"single\",\n                    medium: \"double\",\n                    large : \"\"\n                  })    \n                  break;\n    case \"Soft Drinks\" :\n                    setTitles({\n                      small: \"half\",\n                      medium: \"standard\",\n                      large : \"pint\"\n                    })    \n                    break;\n  }\n}\n\n  \n\n  return (\n    <div className=\"price-titles\" id={name === \"Draught\" ? \"draught-price\" : name === \"Wine\" ? \"wine-price\" : \"\"}>\n      { priceTitles.small !== \"\" ?\n      <Fragment>\n        <p>{priceTitles.small}</p>\n        <p>{priceTitles.medium}</p>\n        { priceTitles.large !== \"\" && \n          <p>{priceTitles.large}</p>\n        }\n      </Fragment>\n        : \n        <p className=\"price-title\">Price</p>\n    }\n    </div>\n  )\n}\n\nexport default PriceTitles;","import React, {Fragment} from 'react'\nimport MenuItem from \"./MenuItem\";\nimport PriceTitles from \"./PriceTitles\";\ninterface ComponentProps {\n name : string\n items: any\n}\n\n const MenuSection = ({name, items} :ComponentProps ) => {\n  return (\n      <div className=\"menu-section\">\n        <PriceTitles \n            name={name}\n        />\n      {items.map((item: any) => (\n          <MenuItem\n          key={item.name}\n          name={item.name}\n          price={item.price}\n          description={item.description}\n          vegetarian={item.vegetarian}\n          size={item.size}\n          />\n      ))}\n    </div>\n  )\n}\n\nexport default MenuSection;","import React, { useState, Fragment } from 'react'\nimport MenuSection from \"./MenuSection\";\n\ninterface ComponentProps {\n name : string\n sections: any\n}\n\n const Menu = ({name, sections} :ComponentProps ) => {\n  const [sectionName, setSectionName] = useState(sections[0].name);\n   const onChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSectionName(e.target.value)\n   } \n\n  return (\n    <div className=\"menu-wrapper\">\n      <select className=\"section-selector\" value={sectionName} onChange={(e) => onChange(e)}>\n      {sections.map((s: any, index:number)=> (\n        <option key={s.name} value={s.name}>{s.name}</option>\n      ))}\n      </select>\n    {sections.map((s: any,index:number)=> (\n      <Fragment key={index}>\n        { s.name ===  sectionName  && \n          <MenuSection\n            key={s.name + index}\n            name={s.name}\n            items={s.items}\n          />\n        }\n      </Fragment>\n    ))}\n  </div>\n  )\n}\n\nexport default Menu;","import React, { useState, useEffect, Fragment } from 'react'\nimport Layout from \"../components/layout/layout\";\nimport Seo from \"../components/seo\";\nimport Menu from \"../components/menus/Menu\";\n\nimport { connect, ConnectedProps } from \"react-redux\";\n\nconst breakfastMenu =  require(\"../../menus/food/breakfast.json\");\nconst mainMenu =  require(\"../../menus/food/main.json\");\nconst drinksMenu =  require(\"../../menus/drinks/drinks.json\");\n\ninterface ComponentProps {\n  menu : {\n    menuType: string\n  }\n}\n\nconst mapState = (state: ComponentProps) => ({\n  menuType: state.menu.menuType\n})\nconst mapDispatch = ({\n  setMenuTypes: (mtype : string) => ({type: \"SET_MENU_TYPE\", payload: mtype })\n})\nconst connector = connect(mapState, mapDispatch);\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ntype Props = PropsFromRedux\n\n\nconst Menus = ({menuType, setMenuTypes}: Props) => {\n  const [menuSelection, setMenuSelection] = useState(\"breakfast\");\n\n  useEffect(() => {\n    // If redux state is \"food\" then then setMenuSelection(\"food\");\n    if(menuType !== \"\") {\n      setMenuSelection(menuType);\n    }\nconsole.log(menuType)\n    return () => {\n      // set redux func to empty string\n      setMenuTypes(\"\")\n    }\n  },[menuType])\n\n  return (\n    <Layout>\n      <Seo title=\"menus\" />\n      <div className=\"menu-select-container\">\n        <h3 className=\"menu-title\">Menus</h3>\n        <span className=\"menu-selection\">\n            <button \n              className={menuSelection === \"breakfast\" ? \"selected\" : \"\"}\n              onClick={() => setMenuSelection(\"breakfast\")} >\n              <span className=\"btn-bg\"></span>\n              <p>Breakfast</p>\n            </button>\n            <button \n              className={menuSelection === \"main\" ? \"selected\" : \"\"}\n              onClick={() => setMenuSelection(\"main\")} >\n            <span className=\"btn-bg\"></span>\n              <p>Main Menu</p>\n            </button>\n            <button\n              className={menuSelection === \"drinks\" ? \"selected\" : \"\"}\n              onClick={() => setMenuSelection(\"drinks\")} >\n            <span className=\"btn-bg\"></span>\n              <p>Drinks</p>\n            </button>\n        </span>\n      </div>\n    <div className=\"menus-container\">\n      {  menuSelection === \"breakfast\" &&  \n      <Fragment>   \n        {breakfastMenu.map((m: any) => (\n        <Menu key={m.name} name={m.name} sections={m.sections} />\n       ))}\n      </Fragment> \n      }\n      {  menuSelection === \"main\" &&  \n      <Fragment>   \n        {mainMenu.map((m: any) => (\n        <Menu key={m.name} name={m.name} sections={m.sections} />\n       ))}\n      </Fragment> \n      }\n        {  menuSelection === \"drinks\" &&  \n      <Fragment>   \n        {drinksMenu.map((m: any) => (\n        <Menu key={m.name} name={m.name} sections={m.sections} />\n       ))}\n      </Fragment> \n      }\n    </div>\n    </Layout>\n  )\n}\n\nexport default connector(Menus);"],"sourceRoot":""}